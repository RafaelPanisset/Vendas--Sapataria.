/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import model.ModelProdutosVendasProdutos;
import controler.Controllercliente;
import controler.ControllerVendasProdutos;
import java.util.ArrayList;
import model.Modelcliente;
import controler.ControllerProduto;
import javax.swing.table.DefaultTableModel;
import model.ModelProduto;
import model.ModelVendasCliente;
import model.ModelVendasProdutos;
import controler.ControllerVendasCliente;
import controler.Controllervendas;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.Modelvendas;
import util.BLDatas;
import controler.ControllerProdutosVendasProdutos;
import controler.ControllerStatus;
import controler.ControllerContarReceber;
import controler.ControllerFornecedor;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import model.ModelContarReceber;
import model.ModelFornecedor;
import model.ModelStatus;

/**
 *
 * @author Cliente
 */
public class viewVendas extends javax.swing.JFrame {

    ArrayList<Modelcliente> listaModelCliente = new ArrayList<>();
    Controllercliente controllerModelCliente = new Controllercliente();
    Modelcliente modelCliente = new Modelcliente();

    ArrayList<ModelProduto> listaModelProduto = new ArrayList<>();
    ModelProduto modelProduto = new ModelProduto();
    ControllerProduto controllerModelProdutos = new ControllerProduto();

    ArrayList<ModelVendasCliente> listaModelVendasClientes = new ArrayList<>();
    ControllerVendasCliente controllerVendasCliente = new ControllerVendasCliente();

    Controllervendas controllerModelVendas = new Controllervendas();
    Modelvendas modelVendas = new Modelvendas();
    BLDatas bLDatas = new BLDatas();

    ControllerVendasProdutos controllerVendasProdutos = new ControllerVendasProdutos();
    ModelVendasProdutos modelVendasProdutos = new ModelVendasProdutos();
    ArrayList<ModelVendasProdutos> listaModelVendasProduto = new ArrayList<>();

    ControllerProdutosVendasProdutos controllerProdutosVendasProdutos = new ControllerProdutosVendasProdutos();
    ArrayList<ModelProdutosVendasProdutos> listaModelProdutosVendasProdutos = new ArrayList();
    String salvarAlterar = "salvar";

    ModelStatus modelStatus = new ModelStatus();
    ControllerStatus controllerStatus = new ControllerStatus();
    ArrayList<ModelStatus> listastatus = new ArrayList();

    ModelContarReceber modelContarReceber = new ModelContarReceber();
    ControllerContarReceber controllerContarReceber = new ControllerContarReceber();
    int codigoVenda = 0;

    ModelFornecedor modelfornecedor = new ModelFornecedor();
    ControllerFornecedor ControllerFornecedor = new ControllerFornecedor();
    ArrayList<ModelFornecedor> listaModelFornecedor = new ArrayList<>();

    /**
     * Creates new form viewVendas
     */
    public viewVendas() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        carregarNaTabelaNomePesquisar();
        preencherListarCliente();
        preencherListarProduto();
        preencherListarProdutoTipoDePagamento();
        preencherListarFornecedor();
        preencherListaDeCores();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cadastro_codigoCliente = new javax.swing.JTextField();
        cadastroVendas = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cadastroQuantidade = new javax.swing.JTextField();
        cadastroAdicionar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        cadastroTabela = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        cadastro_total = new javax.swing.JTextField();
        cadastro_desconto = new javax.swing.JTextField();
        cadastro_cancelar = new javax.swing.JButton();
        cadastro_novo = new javax.swing.JButton();
        cadastro_salvar = new javax.swing.JButton();
        cadastro_remover = new javax.swing.JButton();
        cadastro_nome = new componentes.UJComboBox();
        tipoPagamento = new componentes.UJComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cadastro_forn = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cadastro_fornecedor = new componentes.UJComboBox();
        cadastro_prod = new javax.swing.JTextField();
        marcacomb = new componentes.UJComboBox();
        tamanhoComb = new componentes.UJComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cor_comb = new componentes.UJComboBox();
        generoComb = new componentes.UJComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        consultar_pesquisar = new javax.swing.JTextField();
        consultar_pesquisarBotao = new javax.swing.JButton();
        consultar_excluir = new javax.swing.JButton();
        consultar_alterar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        consultartabela = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Código", "Nome Do Cliente", "Data"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(80);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(80);
            jTable1.getColumnModel().getColumn(2).setMinWidth(180);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(180);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(180);
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setText("Código Cli.");

        jLabel4.setText("Nome Do Cliente:");

        cadastro_codigoCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cadastro_codigoClienteFocusLost(evt);
            }
        });
        cadastro_codigoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastro_codigoClienteActionPerformed(evt);
            }
        });

        cadastroVendas.setEditable(false);
        cadastroVendas.setBackground(new java.awt.Color(153, 255, 204));

        jLabel5.setText("Número Da Venda");

        jLabel6.setText("Código Prod. ");

        jLabel7.setText("Quantidade:");

        jLabel8.setText("Marca");

        cadastroQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastroQuantidadeActionPerformed(evt);
            }
        });

        cadastroAdicionar.setIcon(new javax.swing.ImageIcon("C:\\vendas\\src\\imagens\\add product.png")); // NOI18N
        cadastroAdicionar.setText("Adicionar");
        cadastroAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastroAdicionarActionPerformed(evt);
            }
        });

        cadastroTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Códi Prod.", "Nome Produto", "Quantidade ", "Valor Unitá.", "Valor Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(cadastroTabela);

        jLabel17.setText("Desconto:");

        jLabel18.setText("Valor Total:");

        cadastro_desconto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cadastro_descontoFocusLost(evt);
            }
        });

        cadastro_cancelar.setIcon(new javax.swing.ImageIcon("C:\\vendas\\src\\imagens\\cancel.png")); // NOI18N
        cadastro_cancelar.setText("Cancelar");
        cadastro_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastro_cancelarActionPerformed(evt);
            }
        });

        cadastro_novo.setIcon(new javax.swing.ImageIcon("C:\\vendas\\src\\imagens\\upload.png")); // NOI18N
        cadastro_novo.setText("Novo");
        cadastro_novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastro_novoActionPerformed(evt);
            }
        });

        cadastro_salvar.setIcon(new javax.swing.ImageIcon("C:\\vendas\\src\\imagens\\save.png")); // NOI18N
        cadastro_salvar.setText("Salvar");
        cadastro_salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastro_salvarActionPerformed(evt);
            }
        });

        cadastro_remover.setIcon(new javax.swing.ImageIcon("C:\\vendas\\src\\imagens\\delete.png")); // NOI18N
        cadastro_remover.setText("Remover Produto");
        cadastro_remover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastro_removerActionPerformed(evt);
            }
        });

        cadastro_nome.setAutocompletar(true);
        cadastro_nome.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cadastro_nomePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cadastro_nome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastro_nomeActionPerformed(evt);
            }
        });

        tipoPagamento.setAutocompletar(true);
        tipoPagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoPagamentoActionPerformed(evt);
            }
        });

        jLabel2.setText("Tipo De Pagamento ");

        jLabel9.setText("Código Forn.");

        cadastro_forn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cadastro_fornFocusLost(evt);
            }
        });
        cadastro_forn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastro_fornActionPerformed(evt);
            }
        });

        jLabel10.setText("Nome Do Fornecedor");

        cadastro_fornecedor.setAutocompletar(true);
        cadastro_fornecedor.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cadastro_fornecedorPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cadastro_fornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastro_fornecedorActionPerformed(evt);
            }
        });

        cadastro_prod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cadastro_prodFocusLost(evt);
            }
        });
        cadastro_prod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastro_prodActionPerformed(evt);
            }
        });

        marcacomb.setAutocompletar(true);
        marcacomb.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                marcacombPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        marcacomb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marcacombActionPerformed(evt);
            }
        });

        tamanhoComb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48" }));
        tamanhoComb.setAutocompletar(true);
        tamanhoComb.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                tamanhoCombPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        tamanhoComb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamanhoCombActionPerformed(evt);
            }
        });

        jLabel12.setText("Tamanho");

        jLabel13.setText("Gênero");

        jLabel11.setText("Cor");

        cor_comb.setAutocompletar(true);
        cor_comb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cor_combActionPerformed(evt);
            }
        });

        generoComb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FEMININO", "INFANTIL", "MASCULINO", "OUTROS", " ", " " }));
        generoComb.setAutocompletar(true);
        generoComb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generoCombActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(tipoPagamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(245, 245, 245))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17)
                                    .addComponent(cadastro_desconto, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cadastro_cancelar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cadastro_novo, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cadastro_remover)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(cadastro_total, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cadastro_salvar, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cadastro_prod, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(marcacomb, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(23, 23, 23)
                                .addComponent(jLabel8))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(89, 89, 89)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(generoComb, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel13))))
                                .addGap(20, 20, 20)
                                .addComponent(jLabel11)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cadastroQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cadastroAdicionar)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(151, 151, 151))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(cadastro_codigoCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9)
                            .addComponent(cadastro_forn, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cadastro_nome, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cadastro_fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cadastroVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(68, 68, 68))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(tamanhoComb, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(132, 132, 132)
                        .addComponent(cor_comb, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cadastro_codigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cadastro_nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cadastro_forn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cadastro_fornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cadastroVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tamanhoComb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(generoComb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cor_comb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cadastroAdicionar)
                    .addComponent(cadastroQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cadastro_prod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(marcacomb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cadastro_total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cadastro_desconto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cadastro_novo)
                    .addComponent(cadastro_cancelar)
                    .addComponent(cadastro_remover)
                    .addComponent(cadastro_salvar))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cadastro", jPanel2);

        jLabel1.setText("Pesquisar:");

        consultar_pesquisarBotao.setIcon(new javax.swing.ImageIcon("C:\\vendas\\src\\imagens\\search1.png")); // NOI18N
        consultar_pesquisarBotao.setText("Pesquisa");
        consultar_pesquisarBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultar_pesquisarBotaoActionPerformed(evt);
            }
        });

        consultar_excluir.setIcon(new javax.swing.ImageIcon("C:\\vendas\\src\\imagens\\delete1.png")); // NOI18N
        consultar_excluir.setText("Excluir");
        consultar_excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultar_excluirActionPerformed(evt);
            }
        });

        consultar_alterar.setIcon(new javax.swing.ImageIcon("C:\\vendas\\src\\imagens\\ediit.png")); // NOI18N
        consultar_alterar.setText("Alterar/Vizualizar");
        consultar_alterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultar_alterarActionPerformed(evt);
            }
        });

        consultartabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome Do Cliente", "Data "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(consultartabela);
        if (consultartabela.getColumnModel().getColumnCount() > 0) {
            consultartabela.getColumnModel().getColumn(1).setMinWidth(400);
            consultartabela.getColumnModel().getColumn(1).setPreferredWidth(400);
            consultartabela.getColumnModel().getColumn(1).setMaxWidth(400);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(consultar_pesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(consultar_pesquisarBotao))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(consultar_excluir)
                        .addGap(27, 27, 27)
                        .addComponent(consultar_alterar))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consultar_pesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(consultar_pesquisarBotao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consultar_alterar)
                    .addComponent(consultar_excluir))
                .addGap(52, 52, 52))
        );

        jTabbedPane1.addTab("Consultar/excluir/alterar", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void consultar_alterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultar_alterarActionPerformed
        cadastro_salvar.setEnabled(true);

        salvarAlterar = "alterar";
        int linha = consultartabela.getSelectedRow();
        int codigoVenda = (int) consultartabela.getValueAt(linha, 0);

        // Lista de produtos e da venda
        listaModelProdutosVendasProdutos
                = controllerProdutosVendasProdutos.getListaProdutosVendasProdutoDAO(codigoVenda);
        DefaultTableModel model = (DefaultTableModel) cadastroTabela.getModel();
        model.setNumRows(0);

        for (int i = 0; i < listaModelProdutosVendasProdutos.size(); i++) {

            cadastroVendas.setText(String.valueOf(listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVendas()));
         
            BigDecimal valorTotal = new BigDecimal( listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenProQuantidade()
                * listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenProValor()).setScale(2, RoundingMode.HALF_EVEN);

            model.addRow(new Object[]{
                listaModelProdutosVendasProdutos.get(i).getModelProdutos().getIdProduto(),
                listaModelProdutosVendasProdutos.get(i).getModelProdutos().getProNome(),
                listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenProQuantidade(),
                listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenProValor(),
                valorTotal

            });

        }

        // saber se a venda foi a prazo ou nao para fazer o fluxo de caixa
        somarValorTotalVenda();
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_consultar_alterarActionPerformed

    private void consultar_excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultar_excluirActionPerformed
        // TODO add your handling code here:
        int linha = consultartabela.getSelectedRow();
        listaModelProdutosVendasProdutos = new ArrayList();
        int codigoDaVenda = (int) consultartabela.getValueAt(linha, 0);
        listaModelProdutosVendasProdutos = controllerProdutosVendasProdutos.getListaProdutosVendasProdutoDAO(codigoDaVenda);

        for (int i = 0; i < listaModelProdutosVendasProdutos.size(); i++) {
            modelProduto = new ModelProduto();
            modelProduto.setIdProduto(listaModelProdutosVendasProdutos.get(i).getModelProdutos().getIdProduto());
            modelProduto.setProEstoque(
                    listaModelProdutosVendasProdutos.get(i).getModelProdutos().getProEstoque()
                    + listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenProQuantidade());
            listaModelProduto.add(modelProduto);
        }

        if (controllerModelProdutos.atualizarEstoqueDeProdutoController(listaModelProduto)) {

            controllerVendasProdutos.excluirVendasProdutosController(codigoDaVenda);

            if (controllerModelVendas.excluirvendasController(codigoDaVenda)) {
                JOptionPane.showMessageDialog(this, "Venda excluida com sucesso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                this.carregarNaTabelaNomePesquisar();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao excluir a venda!", "Aviso", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao excluir a venda!", "Aviso", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_consultar_excluirActionPerformed

    private void consultar_pesquisarBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultar_pesquisarBotaoActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo = (DefaultTableModel) this.consultartabela.getModel();
        //pesquisar na tabela.
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);
        this.consultartabela.setRowSorter(classificador);

        //texto digitado
        String texto = consultar_pesquisar.getText();
        classificador.setRowFilter(RowFilter.regexFilter(texto, 1));
    }//GEN-LAST:event_consultar_pesquisarBotaoActionPerformed

    private void cadastro_nomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastro_nomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cadastro_nomeActionPerformed

    private void cadastro_nomePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cadastro_nomePopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        if (cadastro_nome.isPopupVisible()) {
            modelCliente = controllerModelCliente.getclienteController(cadastro_nome.getSelectedItem().toString());
            cadastro_codigoCliente.setText(String.valueOf(modelCliente.getIdCliente()));
        }
    }//GEN-LAST:event_cadastro_nomePopupMenuWillBecomeInvisible

    private void cadastro_removerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastro_removerActionPerformed
        // TODO add your handling code here:
        salvarAlterar = "alterar";
        int linha = cadastroTabela.getSelectedRow();

        DefaultTableModel modelo = (DefaultTableModel) cadastroTabela.getModel();

        if (linha < 0) {
            JOptionPane.showMessageDialog(this, "Selecione algum nome na tabela", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        } else {

            int certeza = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir o produto?");
            if (certeza == JOptionPane.OK_OPTION) {
                modelo.removeRow(linha);
                somarValorTotalVenda();
            }
        }
    }//GEN-LAST:event_cadastro_removerActionPerformed

    private void cadastro_salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastro_salvarActionPerformed

        modelVendas = new Modelvendas();
        int codigoProduto = 0;
        listaModelVendasProduto = new ArrayList<>();
        listaModelProduto = new ArrayList<>();
        double desconto = 0;
        int verEstoque = 0;
        verificaListaDeProduto();
        // Verificar se tem campos em branco.
        if (!cadastroVendas.getText().equals("")) {
            modelVendas.setIdVendas(Integer.parseInt(cadastroVendas.getText()));
        }

        modelVendas.setCliente(Integer.valueOf(cadastro_codigoCliente.getText()));

        try {
            modelVendas.setVenDataVenda(bLDatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
        } catch (Exception e) {
        }

        modelVendas.setVenValorLiquido(Double.parseDouble(cadastro_total.getText()));
        modelVendas.setVenValorBruto(Double.parseDouble(cadastro_total.getText()) + desconto);

        // Verificar se desconto está em branco
        if (cadastro_desconto.getText().equals("")) {
            desconto = 0;
        } else {
            desconto = Double.parseDouble(cadastro_desconto.getText());
        }

        modelVendas.setVenDesconto(desconto);

        // Ver ser o produto está em estoque
        for (int i = 0; i < cadastroTabela.getRowCount(); i++) {
            codigoProduto = (int) cadastroTabela.getValueAt(i, 0);
            modelProduto = new ModelProduto();
            // da baixa no estoque
            modelProduto.setIdProduto(codigoProduto);
            modelProduto.setProEstoque(controllerModelProdutos.getProdutoController(codigoProduto).getProEstoque()
                    - (int) cadastroTabela.getValueAt(i, 2));

            if (modelProduto.getProEstoque() < 0) {
                verEstoque += 1;
            }
        }

        if (verEstoque == 0) {

            if (salvarAlterar.equals("salvar")) {

                // Receber o código da venda.
                codigoVenda = controllerModelVendas.salvarvendasController(modelVendas);
                //salvar
                JOptionPane.showMessageDialog(this, "Venda salva com sucesso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                jTabbedPane1.setSelectedIndex(1);
                if (codigoVenda > 0) {
                    modelVendas = controllerModelVendas.getvendasController(codigoVenda);
                    try {
                        modelVendas.setIdContaReceber(contaReceber());
                    } catch (Exception ex) {
                        Logger.getLogger(viewVendas.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    controllerModelVendas.atualizarvendasController(modelVendas);
                    this.carregarNaTabelaNomePesquisar();

                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao salvar!", "Aviso", JOptionPane.ERROR_MESSAGE);
                    this.carregarNaTabelaNomePesquisar();

                }

                // Atualizar o estoque do produto.
                for (int i = 0; i < cadastroTabela.getRowCount(); i++) {

                    codigoProduto = (int) cadastroTabela.getValueAt(i, 0);
                    modelVendasProdutos = new ModelVendasProdutos();
                    modelProduto = new ModelProduto();
                    // salvar as vendas
                    modelVendasProdutos.setProdutos(codigoProduto);
                    modelVendasProdutos.setVendas(codigoVenda);
                    BigDecimal valor = (BigDecimal) cadastroTabela.getValueAt(i, 3);
                    modelVendasProdutos.setVenProValor((double) valor.doubleValue());
                    modelVendasProdutos.setVenProQuantidade((int) cadastroTabela.getValueAt(i, 2));

                    // da baixa no estoque
                    modelProduto.setIdProduto(codigoProduto);
                    modelProduto.setProEstoque(controllerModelProdutos.getProdutoController(codigoProduto).getProEstoque()
                            - (int) cadastroTabela.getValueAt(i, 2));
                    listaModelVendasProduto.add(modelVendasProdutos);
                    listaModelProduto.add(modelProduto);

                }

                // salvar os produtos da venda.
                if (controllerVendasProdutos.salvarVendasProdutosController(listaModelVendasProduto)) {
                    controllerModelProdutos = new ControllerProduto();
                    // Alterar estoque de produtos
                    controllerModelProdutos.atualizarEstoqueDeProdutoController(listaModelProduto);
                    this.limparFormulario();
                    //  JOptionPane.showMessageDialog(this, "Produtos salvo com sucesso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    //    JOptionPane.showMessageDialog(this, "Erro ao salvar!", "Aviso", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                try {
                    codigoVenda = Integer.valueOf(cadastroVendas.getText());
                    modelVendas = controllerModelVendas.getvendasController(codigoVenda);

                    try {
                        modelVendas.setVenDataVenda(bLDatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
                    } catch (Exception e) {
                    }

                    modelVendas.setVenValorLiquido(Double.parseDouble(cadastro_total.getText()));
                    modelVendas.setVenValorBruto(Double.parseDouble(cadastro_total.getText()) + desconto);

                    // Verificar se desconto está em branco
                    if (cadastro_desconto.getText().equals("")) {
                        desconto = 0;
                    } else {
                        desconto = Double.parseDouble(cadastro_desconto.getText());
                    }

                    modelVendas.setVenDesconto(desconto);
                } catch (java.lang.NumberFormatException e) {
                }

                // modelVendas = controllerModelVendas.getvendasController(codigoVenda);
                int idContareceber = modelVendas.getIdContaReceber();
                controllerContarReceber.excluirReceberController(idContareceber);
                /// Resolver esse prblema
                //alterar
                // alterar excluir produtos da venda
                int linhaProduto = consultartabela.getSelectedRow();
                listaModelProdutosVendasProdutos = new ArrayList();
                int codigoDaVenda = (int) consultartabela.getValueAt(linhaProduto, 0);
                listaModelProdutosVendasProdutos = controllerProdutosVendasProdutos.getListaProdutosVendasProdutoDAO(codigoDaVenda);

                for (int i = 0; i < listaModelProdutosVendasProdutos.size(); i++) {
                    modelProduto = new ModelProduto();
                    modelProduto.setIdProduto(listaModelProdutosVendasProdutos.get(i).getModelProdutos().getIdProduto());
                    modelProduto.setProEstoque(
                            listaModelProdutosVendasProdutos.get(i).getModelProdutos().getProEstoque()
                            + listaModelProdutosVendasProdutos.get(i).getModelVendasProdutos().getVenProQuantidade());
                    listaModelProduto.add(modelProduto);
                }

                if (controllerModelProdutos.atualizarEstoqueDeProdutoController(listaModelProduto)) {
                    if (controllerVendasProdutos.excluirVendasProdutosController(codigoDaVenda)) {
                        //   JOptionPane.showMessageDialog(this, "Venda excluida com sucesso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        this.carregarNaTabelaNomePesquisar();
                        carregarNaTabelaNomePesquisar();
                    } else {
                        //    JOptionPane.showMessageDialog(this, "Erro ao excluir a venda!", "Aviso", JOptionPane.INFORMATION_MESSAGE);

                    }

                } else {
                    //   JOptionPane.showMessageDialog(this, "Erro ao excluir a venda!", "Aviso", JOptionPane.INFORMATION_MESSAGE);

                }
                // alterare excluir produtos da venda
                if (controllerModelVendas.atualizarvendasController(modelVendas)) {
                    JOptionPane.showMessageDialog(this, "Alterado com sucesso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);

                    modelVendas = controllerModelVendas.getvendasController(Integer.valueOf(cadastroVendas.getText()));
                    try {
                        modelVendas.setIdContaReceber(contaReceber());
                    } catch (Exception ex) {
                        Logger.getLogger(viewVendas.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    controllerModelVendas.atualizarvendasController(modelVendas);
                    this.carregarNaTabelaNomePesquisar();
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao alterar a venda!", "Aviso", JOptionPane.INFORMATION_MESSAGE);

                }

                for (int i = 0; i < cadastroTabela.getRowCount(); i++) {
                    codigoProduto = (int) cadastroTabela.getValueAt(i, 0);
                    modelVendasProdutos = new ModelVendasProdutos();
                    modelProduto = new ModelProduto();
                    // salvar as vendas
                    modelVendasProdutos.setProdutos(codigoProduto);
                    modelVendasProdutos.setVendas(modelVendas.getIdVendas());
                    BigDecimal valorUnitario = (BigDecimal) cadastroTabela.getValueAt(i, 3);
                    modelVendasProdutos.setVenProValor(valorUnitario.doubleValue());
                    modelVendasProdutos.setVenProQuantidade((int) cadastroTabela.getValueAt(i, 2));

                    // da baixa no estoque
                    modelProduto.setIdProduto(codigoProduto);
                    modelProduto.setProEstoque(controllerModelProdutos.getProdutoController(codigoProduto).getProEstoque()
                            - (int) cadastroTabela.getValueAt(i, 2));
                    listaModelVendasProduto.add(modelVendasProdutos);
                    listaModelProduto.add(modelProduto);

                }

                if (controllerVendasProdutos.salvarVendasProdutosController(listaModelVendasProduto)) {
                    controllerModelProdutos = new ControllerProduto();
                    // Alterar estoque de produtos
                    controllerModelProdutos.atualizarEstoqueDeProdutoController(listaModelProduto);
                    // JOptionPane.showMessageDialog(this, "Produtos salvo com sucesso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    this.carregarNaTabelaNomePesquisar();
                    this.limparFormulario();
                } else {
                    //  JOptionPane.showMessageDialog(this, "Erro ao salvar!", "Aviso", JOptionPane.ERROR_MESSAGE);
                }

            }

        } else {
            JOptionPane.showMessageDialog(this, "Um ou mais produtos está em falta no estoque!", "Aviso", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_cadastro_salvarActionPerformed

    private void cadastro_novoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastro_novoActionPerformed
        cadastro_salvar.setEnabled(true);
        this.limparFormulario();
        salvarAlterar = "salvar";
    }//GEN-LAST:event_cadastro_novoActionPerformed

    private void cadastro_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastro_cancelarActionPerformed
        // TODO add your handling code here:
        //  this.habilitarDesabilitar(false);
        //  this.limparTela();
    }//GEN-LAST:event_cadastro_cancelarActionPerformed

    private void cadastro_descontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cadastro_descontoFocusLost
        somarValorTotalVenda();
    }//GEN-LAST:event_cadastro_descontoFocusLost

    private void cadastroAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastroAdicionarActionPerformed
        // TODO add your handling code here:
        if (verificaListaDeProduto() == 1){
            if (cadastroQuantidade.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Você deve preencher todos os campos!", "Atenção", JOptionPane.WARNING_MESSAGE);
            } else {
                try {

                    modelProduto = controllerModelProdutos.getProdutoController(Integer.valueOf(cadastro_prod.getText()));
                    int quantidade = 0;
                    DefaultTableModel model = (DefaultTableModel) cadastroTabela.getModel();
                    quantidade = Integer.parseInt(cadastroQuantidade.getText());
                    for (int i = 0; i < 0; i++) {
                        model.setNumRows(i);
                    }

                    // aproximação devalores
                    BigDecimal aproximacaoValor = new BigDecimal(modelProduto.getProValor()).setScale(2, RoundingMode.HALF_EVEN);
                    BigDecimal aproximacaoValorTotal = new BigDecimal(quantidade * modelProduto.getProValor()).setScale(2, RoundingMode.HALF_EVEN);

                    model.addRow(new Object[]{modelProduto.getIdProduto(),
                        modelProduto.getProNome(),
                        quantidade,
                        aproximacaoValor,
                        aproximacaoValorTotal
                    });
                    // somar produtos toda vez que for chamado
                    somarValorTotalVenda();

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Você deve preencher o código do cliente e do produto!", "Atenção", JOptionPane.WARNING_MESSAGE);

                }

            }
        } else {
            JOptionPane.showMessageDialog(this, "Esse produto não existe ou está em falta no estoque!", "Atenção", JOptionPane.WARNING_MESSAGE);

        }

    }//GEN-LAST:event_cadastroAdicionarActionPerformed

    private void cadastro_codigoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastro_codigoClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cadastro_codigoClienteActionPerformed

    private void cadastro_codigoClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cadastro_codigoClienteFocusLost
        // TODO add your handling code here:
        try {
            modelCliente = controllerModelCliente.getclienteController(Integer.valueOf(cadastro_codigoCliente.getText()));
            cadastro_nome.setSelectedItem(modelCliente.getCliNome());
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_cadastro_codigoClienteFocusLost

    private void tipoPagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoPagamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tipoPagamentoActionPerformed

    private void cadastro_fornecedorPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cadastro_fornecedorPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        if (cadastro_fornecedor.isPopupVisible()) {
            modelfornecedor = ControllerFornecedor.getFornecedorController(cadastro_fornecedor.getSelectedItem().toString());
            cadastro_forn.setText(String.valueOf(modelfornecedor.getIdForncedor()));

        }
    }//GEN-LAST:event_cadastro_fornecedorPopupMenuWillBecomeInvisible

    private void cadastro_fornFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cadastro_fornFocusLost
        // TODO add your handling code here:
        try {
            modelfornecedor = ControllerFornecedor.getFornecedorController(Integer.valueOf(cadastro_forn.getText()));
            cadastro_fornecedor.setSelectedItem(modelfornecedor.getNomeFornecedor());

        } catch (NumberFormatException e) {
        }

    }//GEN-LAST:event_cadastro_fornFocusLost

    private void cadastro_prodFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cadastro_prodFocusLost
        // TODO add your handling code here:
        try {
            modelProduto = controllerModelProdutos.getProdutoController(Integer.valueOf(cadastro_prod.getText()));
//            cadastro_produto.setSelectedItem(modelProduto.getProNome());
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_cadastro_prodFocusLost

    private void marcacombPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_marcacombPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        try {
            if (marcacomb.isPopupVisible()) {
                modelProduto = controllerModelProdutos.getProdutoNomeController(marcacomb.getSelectedItem().toString());
                cadastro_prod.setText(String.valueOf(modelProduto.getIdProduto()));

            }
        } catch (java.lang.NullPointerException e) {
            JOptionPane.showMessageDialog(this, "O fornecedor não tem esse tipo de produto cadastrados!", "Aviso", JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_marcacombPopupMenuWillBecomeInvisible

    private void tamanhoCombPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_tamanhoCombPopupMenuWillBecomeInvisible
        // TODO add your handling code here:

    }//GEN-LAST:event_tamanhoCombPopupMenuWillBecomeInvisible

    private void marcacombActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marcacombActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_marcacombActionPerformed

    private void tamanhoCombActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamanhoCombActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_tamanhoCombActionPerformed

    private void cadastro_fornActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastro_fornActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cadastro_fornActionPerformed

    private void cadastro_fornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastro_fornecedorActionPerformed
    }//GEN-LAST:event_cadastro_fornecedorActionPerformed

    private void cor_combActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cor_combActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cor_combActionPerformed

    private void generoCombActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generoCombActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generoCombActionPerformed

    private void cadastro_prodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastro_prodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cadastro_prodActionPerformed

    private void cadastroQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastroQuantidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cadastroQuantidadeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewVendas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewVendas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewVendas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewVendas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewVendas().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cadastroAdicionar;
    private javax.swing.JTextField cadastroQuantidade;
    private javax.swing.JTable cadastroTabela;
    private javax.swing.JTextField cadastroVendas;
    private javax.swing.JButton cadastro_cancelar;
    private javax.swing.JTextField cadastro_codigoCliente;
    private javax.swing.JTextField cadastro_desconto;
    private javax.swing.JTextField cadastro_forn;
    private componentes.UJComboBox cadastro_fornecedor;
    private componentes.UJComboBox cadastro_nome;
    private javax.swing.JButton cadastro_novo;
    private javax.swing.JTextField cadastro_prod;
    private javax.swing.JButton cadastro_remover;
    private javax.swing.JButton cadastro_salvar;
    private javax.swing.JTextField cadastro_total;
    private javax.swing.JButton consultar_alterar;
    private javax.swing.JButton consultar_excluir;
    private javax.swing.JTextField consultar_pesquisar;
    private javax.swing.JButton consultar_pesquisarBotao;
    private javax.swing.JTable consultartabela;
    private componentes.UJComboBox cor_comb;
    private componentes.UJComboBox generoComb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private componentes.UJComboBox marcacomb;
    private componentes.UJComboBox tamanhoComb;
    private componentes.UJComboBox tipoPagamento;
    // End of variables declaration//GEN-END:variables

    private void preencherListarCliente() {
        listaModelCliente = controllerModelCliente.getListaclienteController();
        cadastro_nome.removeAllItems();
        for (int i = 0; i < listaModelCliente.size(); i++) {
            cadastro_nome.addItem(listaModelCliente.get(i).getCliNome());
        }
    }

    private void preencherListarProduto() {
        listaModelProduto = controllerModelProdutos.getListaProdutoController();

        marcacomb.removeAllItems();
        for (int i = 0; i < listaModelProduto.size(); i++) {
            marcacomb.addItem(listaModelProduto.get(i).getProNome());
        }
    }

    private void preencherListarProdutoTipoDePagamento() {

        listastatus = controllerStatus.getListaStatusController();

        tipoPagamento.removeAllItems();
        for (int i = 0; i < listastatus.size(); i++) {
            tipoPagamento.addItem(listastatus.get(i).getTipo());
        }
    }

    public void carregarNaTabelaNomePesquisar() {
        // modelo para tabela
        DefaultTableModel model = (DefaultTableModel) consultartabela.getModel();
        listaModelVendasClientes = new ArrayList();
        listaModelVendasClientes = controllerVendasCliente.getListVendaCliente();
        model.setNumRows(0);
        for (int i = 0; i < listaModelVendasClientes.size(); i++) {
            // Não carregar na tabela
            model.addRow(new Object[]{
                listaModelVendasClientes.get(i).getModelvendas().getIdVendas(),
                listaModelVendasClientes.get(i).getModecliente().getCliNome(),
                listaModelVendasClientes.get(i).getModelvendas().getVenDataVenda()
            });
        }
    }

    private void valorDesconto() {
        double desconto;
        try {
            desconto = Double.valueOf(cadastro_desconto.getText());
            cadastro_total.setText(String.valueOf(
                    Double.parseDouble(cadastro_total.getText()) - Double.parseDouble(cadastro_desconto.getText())));

        } catch (NumberFormatException e) {
            desconto = 0;
            cadastro_total.setText(String.valueOf(
                    Double.parseDouble(cadastro_total.getText()) - desconto));
        }
        // cadastro_total.setText(String.valueOf(
        //Double.parseDouble(cadastro_total.getText()) - Double.parseDouble(cadastro_desconto.getText())));
    }

    private void somarValorTotalVenda() {
        double soma = 0, valor2;
        BigDecimal valor1;

        int cout = cadastroTabela.getRowCount();
        for (int i = 0; i < cout; i++) {

            if (cadastroTabela.getValueAt(i, 4).getClass().getName().equals("java.lang.Double")) {
                valor2 = (double) cadastroTabela.getValueAt(i, 4);
                soma = soma + valor2;

            } else {
                valor1 = (BigDecimal) cadastroTabela.getValueAt(i, 4);
                soma = soma + valor1.doubleValue();
            }
        }

        cadastro_total.setText(String.valueOf(soma));
        valorDesconto();
    }

    private void limparFormulario() {
        cadastroQuantidade.setText("");
        cadastro_desconto.setText("");
        cadastro_total.setText("");
        DefaultTableModel model = (DefaultTableModel) cadastroTabela.getModel();
        model.setRowCount(0);
    }

    private int contaReceber() throws Exception {

        if (tipoPagamento.getSelectedItem().equals("À VISTA")) {
            modelContarReceber = new ModelContarReceber();

            modelContarReceber.setIdStatus(2);
            modelContarReceber.setIdVendas(codigoVenda);
            modelContarReceber.setIdCliente(Integer.valueOf(cadastro_codigoCliente.getText()));
            modelContarReceber.setReceDataCompra(bLDatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
            modelContarReceber.setReceVencimento(bLDatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
            modelContarReceber.setRecJuros(0.0);
            modelContarReceber.setReceRecebeu(Double.valueOf(cadastro_total.getText()));
            modelContarReceber.setReceRestante(0.0);
            modelContarReceber.setReceValorTotal(Double.valueOf(cadastro_total.getText()));
            modelContarReceber.setAtivo("PAGO");
            modelContarReceber.setValorFinal(0.0);

            int idReceber = controllerContarReceber.salvarReceberController(modelContarReceber);

            return idReceber;
        } else {

            modelContarReceber = new ModelContarReceber();

            modelContarReceber.setIdStatus(2);
            modelContarReceber.setIdVendas(codigoVenda);
            modelContarReceber.setIdCliente(Integer.valueOf(cadastro_codigoCliente.getText()));
            modelContarReceber.setReceDataCompra(bLDatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
            modelContarReceber.setReceValorTotal(Double.valueOf(cadastro_total.getText()));
            modelContarReceber.setAtivo("");

            vizualizarProdutosComprados abriOutrolabel = new vizualizarProdutosComprados();
            abriOutrolabel.receberInformacoes(modelContarReceber);
            abriOutrolabel.setVisible(true);

            return 0;
        }

    }

    private void preencherListarFornecedor() {
        listaModelFornecedor = ControllerFornecedor.getListaFornecedorController();
        cadastro_fornecedor.removeAllItems();
        for (int i = 0; i < listaModelFornecedor.size(); i++) {
            cadastro_fornecedor.addItem(listaModelFornecedor.get(i).getNomeFornecedor());
        }
    }

    private void preencherListaDeCores() {
        listaModelProduto = controllerModelProdutos.getListaProdutoController();

        cor_comb.removeAllItems();
        for (int i = 0; i < listaModelProduto.size(); i++) {
            cor_comb.addItem(listaModelProduto.get(i).getProCor());
        }
    }

    private int verificaListaDeProduto() {
        listaModelProduto = controllerModelProdutos.getListaProdutoController();
        int idFornecedor, size = 0;
        String genero = new String();
        String cor = new String();
        int quantidade = 0;
        try {
            idFornecedor = Integer.valueOf(cadastro_forn.getText());
            size = Integer.valueOf(tamanhoComb.getSelectedItem().toString());
            genero = generoComb.getSelectedItem().toString();
            cor = cor_comb.getSelectedItem().toString();

        } catch (Exception e) {
            idFornecedor = 0;
            size = 0;
        }

        for (int i = 0; i < listaModelProduto.size(); i++) {

            if (idFornecedor == listaModelProduto.get(i).getPro_idFornecedor() && genero.equals(
                    listaModelProduto.get(i).getProGenero()) && cor.equals(listaModelProduto.get(i).getProCor())
                    && size == listaModelProduto.get(i).getProTamanho()) {
                quantidade = listaModelProduto.get(i).getProEstoque();
                return 1;
            }
        }
        return 0;
    }

}
