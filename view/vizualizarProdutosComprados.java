/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controler.ControllerContaReceberCliente;
import controler.ControllerContarReceber;
import controler.Controllercliente;
import controler.Controllervendas;
import java.awt.Color;
import java.awt.Component;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.ModelClienteReceber;
import model.ModelContarReceber;
import model.Modelcliente;
import model.Modelvendas;
import util.BLDatas;
import util.Formatador;

/**
 *
 * @author Cliente
 */
public class vizualizarProdutosComprados extends javax.swing.JFrame {

    ControllerContarReceber controllerContarReceber = new ControllerContarReceber();
    ModelContarReceber modelContareceber = new ModelContarReceber();
    ArrayList<ModelContarReceber> listaModel = new ArrayList<>();

    ArrayList<ModelClienteReceber> listaContaCliente = new ArrayList<>();
    ControllerContaReceberCliente controllerContaReceberCliente = new ControllerContaReceberCliente();
    ModelClienteReceber ModelClienteReceber = new ModelClienteReceber();

    Modelcliente modelCliente = new Modelcliente();
    Controllercliente controlerCliente = new Controllercliente();

    Modelvendas modelvendas = new Modelvendas();
    Controllervendas controlerVendas = new Controllervendas();

    BLDatas bLDatas = new BLDatas();
    int salvar = 0;
    int calcular = 0;

    Formatador formatador = new Formatador();

    int idvendaConta;

    /**
     * Creates new form vizualizarProdutosComprados
     */
    public vizualizarProdutosComprados() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        painel_registrar_pagamento.setEnabled(false);
        setResizable(false);
        setLocationRelativeTo(null);
        this.testarEntrada();
        try {
            this.VerificarAtivo();
        } catch (Exception ex) {
            Logger.getLogger(vizualizarProdutosComprados.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.carregarNaTabelaNomePesquisar();

    }

    public void testarEntrada() {

        vendadados.setEnabled(false);
        pagar_nome.setEnabled(false);
        data_compra.setEnabled(false);
        juros.setEnabled(false);
        valor_total.setEnabled(false);
        entrada.setEnabled(false);
        data_vencimento.setEnabled(false);
        calcular1.setEnabled(false);
        pagar_cliente.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        pagar_cliente = new componentes.UJComboBox();
        jLabel4 = new javax.swing.JLabel();
        pagar_nome = new componentes.UJComboBox();
        data_compra = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        vendadados = new componentes.UJComboBox();
        jPanel2 = new javax.swing.JPanel();
        juros = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        valor_total = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        entrada = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        data_vencimento = new com.toedter.calendar.JDateChooser();
        salvar1 = new javax.swing.JToggleButton();
        calcular1 = new javax.swing.JToggleButton();
        totalcomjuros = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        bt_fazerOrcamento = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        receber_pagas = new javax.swing.JButton();
        receber_todos = new javax.swing.JButton();
        receber_pendentes = new javax.swing.JButton();
        receber_atrasadas = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        pesquisar = new javax.swing.JFormattedTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        painel_registrar_pagamento = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        receber_pagamento = new javax.swing.JButton();
        receber_calcular = new javax.swing.JButton();
        recebido_recebido = new javax.swing.JSpinner();
        recebido_desconto = new javax.swing.JSpinner();
        vencimento = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel6.setBackground(new java.awt.Color(204, 255, 204));

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados do Cliente", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jLabel3.setText("Cliente");

        pagar_cliente.setAutocompletar(true);

        jLabel4.setText("Nome");

        pagar_nome.setAutocompletar(true);

        jLabel5.setText("Data Da Compra");

        jLabel13.setText("Venda");

        vendadados.setAutocompletar(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(pagar_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vendadados, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(pagar_nome, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(data_compra, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(vendadados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5))
                    .addComponent(jLabel13))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pagar_nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(data_compra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pagar_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Conta", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        juros.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 200.0d, 1.0d));

        jLabel6.setText("Juros %");

        jLabel7.setText("Valor Total");

        valor_total.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        valor_total.setEnabled(false);

        jLabel9.setText("Entrada");

        entrada.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(10.0d)));

        jLabel11.setText("Primeiro Vencimento");

        salvar1.setText("Salvar");
        salvar1.setEnabled(false);
        salvar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvar1ActionPerformed(evt);
            }
        });

        calcular1.setText("Calcular ");
        calcular1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcular1ActionPerformed(evt);
            }
        });

        totalcomjuros.setBackground(new java.awt.Color(255, 204, 204));
        totalcomjuros.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        totalcomjuros.setEnabled(false);
        totalcomjuros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalcomjurosActionPerformed(evt);
            }
        });

        jLabel12.setText("Total com Juros");

        bt_fazerOrcamento.setText("Fazer orçamento");
        bt_fazerOrcamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_fazerOrcamentoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(juros, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(valor_total, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(55, 55, 55)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(entrada, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel12)
                    .addComponent(totalcomjuros, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(data_vencimento, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(234, 234, 234))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_fazerOrcamento)
                        .addGap(50, 50, 50)
                        .addComponent(calcular1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(salvar1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel9)
                        .addComponent(jLabel11))
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(juros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(valor_total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(entrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(data_vencimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jLabel12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalcomjuros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(salvar1)
                            .addComponent(calcular1)
                            .addComponent(bt_fazerOrcamento))
                        .addGap(52, 52, 52))))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cadastro", jPanel6);

        jPanel7.setBackground(new java.awt.Color(204, 255, 204));

        jPanel8.setBackground(new java.awt.Color(204, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        receber_pagas.setBackground(new java.awt.Color(204, 204, 255));
        receber_pagas.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        receber_pagas.setText("Buscar  Pagas");
        receber_pagas.setPreferredSize(new java.awt.Dimension(133, 23));
        receber_pagas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receber_pagasActionPerformed(evt);
            }
        });

        receber_todos.setBackground(new java.awt.Color(204, 204, 255));
        receber_todos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        receber_todos.setText("Buscar Todos");
        receber_todos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receber_todosActionPerformed(evt);
            }
        });

        receber_pendentes.setBackground(new java.awt.Color(204, 204, 255));
        receber_pendentes.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        receber_pendentes.setText("Buscar Pendentes");
        receber_pendentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receber_pendentesActionPerformed(evt);
            }
        });

        receber_atrasadas.setBackground(new java.awt.Color(204, 204, 255));
        receber_atrasadas.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        receber_atrasadas.setText("Buscar Atrasadas");
        receber_atrasadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receber_atrasadasActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Pesquisar Nome Do Cliente");

        pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 204, 204));
        jButton1.setText("Pesquisar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addGap(50, 50, 50))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(receber_todos, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86)
                .addComponent(receber_pendentes, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(receber_pagas, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93)
                .addComponent(receber_atrasadas, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(receber_todos)
                    .addComponent(receber_pendentes)
                    .addComponent(receber_pagas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receber_atrasadas))
                .addGap(32, 32, 32)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(pesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(1, 1, 1))
        );

        tabela.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Cliente", "Tipo", "Data", "Prox. Vencimento", "Total", "Ativo", "Recebeu", "Restante"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabela);
        if (tabela.getColumnModel().getColumnCount() > 0) {
            tabela.getColumnModel().getColumn(0).setMinWidth(40);
            tabela.getColumnModel().getColumn(0).setPreferredWidth(40);
            tabela.getColumnModel().getColumn(0).setMaxWidth(40);
            tabela.getColumnModel().getColumn(1).setMinWidth(200);
            tabela.getColumnModel().getColumn(1).setPreferredWidth(200);
            tabela.getColumnModel().getColumn(1).setMaxWidth(200);
            tabela.getColumnModel().getColumn(2).setMinWidth(60);
            tabela.getColumnModel().getColumn(2).setPreferredWidth(60);
            tabela.getColumnModel().getColumn(2).setMaxWidth(60);
            tabela.getColumnModel().getColumn(5).setMinWidth(60);
            tabela.getColumnModel().getColumn(5).setPreferredWidth(60);
            tabela.getColumnModel().getColumn(5).setMaxWidth(60);
            tabela.getColumnModel().getColumn(7).setMinWidth(60);
            tabela.getColumnModel().getColumn(7).setPreferredWidth(60);
            tabela.getColumnModel().getColumn(7).setMaxWidth(60);
            tabela.getColumnModel().getColumn(8).setMinWidth(60);
            tabela.getColumnModel().getColumn(8).setPreferredWidth(60);
            tabela.getColumnModel().getColumn(8).setMaxWidth(60);
        }

        painel_registrar_pagamento.setBackground(new java.awt.Color(204, 255, 255));
        painel_registrar_pagamento.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Registrar Pagamento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel1.setText("Valor Recebido");

        jLabel2.setText("Desconto");

        receber_pagamento.setText("Fazer Pagamento");
        receber_pagamento.setEnabled(false);
        receber_pagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receber_pagamentoActionPerformed(evt);
            }
        });

        receber_calcular.setText("Calcular");
        receber_calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receber_calcularActionPerformed(evt);
            }
        });

        recebido_recebido.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 10000.0d, 1.0d));

        recebido_desconto.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 10000.0d, 1.0d));

        jLabel8.setText("Próximo Vencimento");

        javax.swing.GroupLayout painel_registrar_pagamentoLayout = new javax.swing.GroupLayout(painel_registrar_pagamento);
        painel_registrar_pagamento.setLayout(painel_registrar_pagamentoLayout);
        painel_registrar_pagamentoLayout.setHorizontalGroup(
            painel_registrar_pagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel_registrar_pagamentoLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(painel_registrar_pagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(painel_registrar_pagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel_registrar_pagamentoLayout.createSequentialGroup()
                        .addComponent(recebido_desconto, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(413, 413, 413)
                        .addComponent(receber_calcular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                        .addComponent(receber_pagamento)
                        .addGap(28, 28, 28))
                    .addGroup(painel_registrar_pagamentoLayout.createSequentialGroup()
                        .addComponent(recebido_recebido, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(vencimento, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        painel_registrar_pagamentoLayout.setVerticalGroup(
            painel_registrar_pagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel_registrar_pagamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel_registrar_pagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painel_registrar_pagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(recebido_recebido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8))
                    .addComponent(vencimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painel_registrar_pagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(recebido_desconto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painel_registrar_pagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(receber_calcular)
                    .addComponent(receber_pagamento))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(painel_registrar_pagamento, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(painel_registrar_pagamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Contas a Receber", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
 
        DefaultTableModel modelo = (DefaultTableModel) this.tabela.getModel();
        //pesquisar na tabela.
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);
        this.tabela.setRowSorter(classificador);

        //texto digitado
        String texto = pesquisar.getText().toUpperCase();
        classificador.setRowFilter(RowFilter.regexFilter(texto, 1));

    }//GEN-LAST:event_jButton1ActionPerformed

    private void receber_todosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receber_todosActionPerformed
        // TODO add your handling code here:
        carregarNaTabelaNomePesquisar();

    }//GEN-LAST:event_receber_todosActionPerformed

    private void receber_pagasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receber_pagasActionPerformed
        // TODO add your handling code here:
        carregarPagas();
    }//GEN-LAST:event_receber_pagasActionPerformed

    private void receber_atrasadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receber_atrasadasActionPerformed
        // TODO add your handling code here:
        carregarAtrasados();
    }//GEN-LAST:event_receber_atrasadasActionPerformed

    private void receber_pendentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receber_pendentesActionPerformed
        // TODO add your handling code here:
        carregarPedentes();
    }//GEN-LAST:event_receber_pendentesActionPerformed

    private void pesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pesquisarActionPerformed

    private void receber_calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receber_calcularActionPerformed
        // TODO add your handling code here:
        int linha = this.tabela.getSelectedRow();

        if (linha < 0) {
            JOptionPane.showMessageDialog(this, "Selecione algum nome na tabela!", "Aviso", JOptionPane.WARNING_MESSAGE);
        } else {

            int codigo = (int) tabela.getValueAt(linha, 0);
            modelContareceber = controllerContarReceber.getReceberController(codigo);
            //Ver se o valor digitádo é maior que o restante

            if (formatador.converterVirgulaParaPonto(recebido_recebido.getValue().toString()) <= modelContareceber.getReceRestante()) {
                try {
                    resultado();
                } catch (Exception ex) {
                    Logger.getLogger(vizualizarProdutosComprados.class.getName()).log(Level.SEVERE, null, ex);
                }
                receber_pagamento.setEnabled(true);

            } else {
                JOptionPane.showMessageDialog(this, "O valor digitado é maior que o restante!", "Aviso", JOptionPane.WARNING_MESSAGE);
                receber_pagamento.setEnabled(false);

            }

        }
    }//GEN-LAST:event_receber_calcularActionPerformed

    private void receber_pagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receber_pagamentoActionPerformed
        try {
            int option = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja realizar o pagamento?", "Aviso", JOptionPane.YES_NO_OPTION);

            if (option == JOptionPane.OK_OPTION) {
                if (controllerContarReceber.atualizarReceberController(resultado())) {
                    JOptionPane.showMessageDialog(this, "Pagamento realizado com sucesso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    VerificarAtivo();
                    recebido_recebido.setValue(0);
                    vencimento.setDate(null);
                    recebido_desconto.setValue(0);
                    receber_pagamento.setEnabled(false);
                    carregarNaTabelaNomePesquisar();
                }

            }

            // TODO add your handling code here:
        } catch (Exception ex) {
            Logger.getLogger(vizualizarProdutosComprados.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_receber_pagamentoActionPerformed

    private void salvar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvar1ActionPerformed
        try {
            // TODO add your handling code here:
            fazerOrcamento();
        } catch (Exception ex) {
            Logger.getLogger(vizualizarProdutosComprados.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_salvar1ActionPerformed

    private void calcular1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcular1ActionPerformed
        // TODO add your handling code here:
        salvar1.setEnabled(true);
    }//GEN-LAST:event_calcular1ActionPerformed

    private void bt_fazerOrcamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_fazerOrcamentoActionPerformed
        // TODO add your handling code here:
        if (valor_total.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Você precisa fazer uma venda primeiro e escolher a forma de pagamento A PRAZO!", "Atenção", JOptionPane.WARNING_MESSAGE);
            vendadados.setEnabled(false);
            pagar_nome.setEnabled(false);
            data_compra.setEnabled(false);
            juros.setEnabled(false);
            valor_total.setEnabled(false);
            entrada.setEnabled(false);
            data_vencimento.setEnabled(false);
            calcular1.setEnabled(false);
            pagar_cliente.setEnabled(false);
            new viewVendas().setVisible(true);
            dispose();

        } else {
            vendadados.setEnabled(true);
            pagar_nome.setEnabled(true);
            data_compra.setEnabled(true);
            juros.setEnabled(true);
            valor_total.setEnabled(true);
            entrada.setEnabled(true);
            data_vencimento.setEnabled(true);
            calcular1.setEnabled(true);
            pagar_cliente.setEnabled(true);
            bt_fazerOrcamento.setEnabled(false);

        }
    }//GEN-LAST:event_bt_fazerOrcamentoActionPerformed

    private void totalcomjurosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalcomjurosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalcomjurosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vizualizarProdutosComprados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vizualizarProdutosComprados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vizualizarProdutosComprados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vizualizarProdutosComprados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new vizualizarProdutosComprados().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(vizualizarProdutosComprados.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_fazerOrcamento;
    private javax.swing.JToggleButton calcular1;
    private com.toedter.calendar.JDateChooser data_compra;
    private com.toedter.calendar.JDateChooser data_vencimento;
    private javax.swing.JSpinner entrada;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JSpinner juros;
    private componentes.UJComboBox pagar_cliente;
    private componentes.UJComboBox pagar_nome;
    private javax.swing.JPanel painel_registrar_pagamento;
    private javax.swing.JFormattedTextField pesquisar;
    private javax.swing.JButton receber_atrasadas;
    private javax.swing.JButton receber_calcular;
    private javax.swing.JButton receber_pagamento;
    private javax.swing.JButton receber_pagas;
    private javax.swing.JButton receber_pendentes;
    private javax.swing.JButton receber_todos;
    private javax.swing.JSpinner recebido_desconto;
    private javax.swing.JSpinner recebido_recebido;
    private javax.swing.JToggleButton salvar1;
    private javax.swing.JTable tabela;
    private javax.swing.JTextField totalcomjuros;
    private javax.swing.JTextField valor_total;
    private com.toedter.calendar.JDateChooser vencimento;
    private componentes.UJComboBox vendadados;
    // End of variables declaration//GEN-END:variables

    public void carregarNaTabelaNomePesquisar() {
        // modelo para tabela

        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        listaContaCliente = new ArrayList();
        listaContaCliente = controllerContaReceberCliente.getListaProdutosVendasProdutoDAO();
        String tipo;

        tabela.setDefaultRenderer(Object.class, new mudarCor());

        model.setNumRows(0);
        for (int i = 0; i < listaContaCliente.size(); i++) {

            if (listaContaCliente.get(i).getModelreceber().getIdStatus() == 5) {
                tipo = "A PRAZO";
            } else {
                tipo = "À VISTA";
            }
            // Não carregar na tabela
            model.addRow(new Object[]{
                listaContaCliente.get(i).getModelreceber().getIdReceber(),
                listaContaCliente.get(i).getModelCliente().getCliNome(),
                tipo,
                listaContaCliente.get(i).getModelreceber().getReceDataCompra(),
                listaContaCliente.get(i).getModelreceber().getReceVencimento(),
                listaContaCliente.get(i).getModelreceber().getReceValorTotal(),
                listaContaCliente.get(i).getModelreceber().getAtivo(),
                listaContaCliente.get(i).getModelreceber().getReceRecebeu(),
                listaContaCliente.get(i).getModelreceber().getReceRestante()
            });
        }
    }

    public void carregarPedentes() {
        // modelo para tabela

        listaContaCliente = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        listaContaCliente = new ArrayList();
        listaContaCliente = controllerContaReceberCliente.getListaProdutosVendasProdutoDAO();
        String tipo;

        model.setNumRows(0);
        for (int i = 0; i < listaContaCliente.size(); i++) {

            if (listaContaCliente.get(i).getModelreceber().getIdStatus() == 5) {
                tipo = "A PRAZO";
            } else {
                tipo = "À VISTA";
            }

            if (listaContaCliente.get(i).getModelreceber().getAtivo().equals("PENDENTE")) {
                // Não carregar na tabela
                model.addRow(new Object[]{
                    listaContaCliente.get(i).getModelreceber().getIdReceber(),
                    listaContaCliente.get(i).getModelCliente().getCliNome(),
                    tipo,
                    listaContaCliente.get(i).getModelreceber().getReceDataCompra(),
                    listaContaCliente.get(i).getModelreceber().getReceVencimento(),
                    listaContaCliente.get(i).getModelreceber().getReceValorTotal(),
                    listaContaCliente.get(i).getModelreceber().getAtivo(),
                    listaContaCliente.get(i).getModelreceber().getReceRecebeu(),
                    listaContaCliente.get(i).getModelreceber().getReceRestante()
                });
            }
        }
    }

    public void carregarAtrasados() {
        // modelo para tabela

        listaContaCliente = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        listaContaCliente = new ArrayList();
        listaContaCliente = controllerContaReceberCliente.getListaProdutosVendasProdutoDAO();
        String tipo;

        model.setNumRows(0);
        for (int i = 0; i < listaContaCliente.size(); i++) {

            if (listaContaCliente.get(i).getModelreceber().getIdStatus() == 5) {
                tipo = "A PRAZO";
            } else {
                tipo = "À VISTA";
            }

            if (listaContaCliente.get(i).getModelreceber().getAtivo().equals("ATRASADO")) {
                // Não carregar na tabela
                model.addRow(new Object[]{
                    listaContaCliente.get(i).getModelreceber().getIdReceber(),
                    listaContaCliente.get(i).getModelCliente().getCliNome(),
                    tipo,
                    listaContaCliente.get(i).getModelreceber().getReceDataCompra(),
                    listaContaCliente.get(i).getModelreceber().getReceVencimento(),
                    listaContaCliente.get(i).getModelreceber().getReceValorTotal(),
                    listaContaCliente.get(i).getModelreceber().getAtivo(),
                    listaContaCliente.get(i).getModelreceber().getReceRecebeu(),
                    listaContaCliente.get(i).getModelreceber().getReceRestante()
                });
            }
        }
    }

    public void carregarPagas() {
        // modelo para tabela

        listaContaCliente = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        listaContaCliente = new ArrayList();
        listaContaCliente = controllerContaReceberCliente.getListaProdutosVendasProdutoDAO();
        String tipo;

        model.setNumRows(0);
        for (int i = 0; i < listaContaCliente.size(); i++) {

            if (listaContaCliente.get(i).getModelreceber().getIdStatus() == 5) {
                tipo = "A PRAZO";
            } else {
                tipo = "À VISTA";
            }

            if (listaContaCliente.get(i).getModelreceber().getAtivo().equals("PAGO")) {
                // Não carregar na tabela
                model.addRow(new Object[]{
                    listaContaCliente.get(i).getModelreceber().getIdReceber(),
                    listaContaCliente.get(i).getModelCliente().getCliNome(),
                    tipo,
                    listaContaCliente.get(i).getModelreceber().getReceDataCompra(),
                    listaContaCliente.get(i).getModelreceber().getReceVencimento(),
                    listaContaCliente.get(i).getModelreceber().getReceValorTotal(),
                    listaContaCliente.get(i).getModelreceber().getAtivo(),
                    listaContaCliente.get(i).getModelreceber().getReceRecebeu(),
                    listaContaCliente.get(i).getModelreceber().getReceRestante()
                });
            }
        }
    }

    void receberInformacoes(ModelContarReceber modelContarReceber) throws Exception {
        // Model cliente e contas a receber
        modelCliente = new Modelcliente();
        modelCliente = controlerCliente.getclienteController(modelContarReceber.getIdCliente());
        controllerContarReceber = new ControllerContarReceber();
        modelContareceber = new ModelContarReceber();
        pagar_cliente.removeAllItems();
        pagar_nome.removeAllItems();
//        double valorFinal;
//        double juro;
//        double total;

        // Setando informações
        pagar_cliente.addItem(modelContarReceber.getIdCliente());
        idvendaConta = modelContarReceber.getIdVendas();
        pagar_nome.addItem(modelCliente.getCliNome());
        data_compra.setDate(modelContarReceber.getReceDataCompra());
        valor_total.setText(String.valueOf(modelContarReceber.getReceValorTotal()));
        vendadados.addItem(modelContarReceber.getIdVendas());

//        modelContareceber.setIdStatus(5);
//        modelContareceber.setIdVendas(modelContarReceber.getIdVendas());
//        modelContareceber.setIdCliente(modelContarReceber.getIdCliente());
//
        //setando o model
//            modelContareceber.setReceDataCompra(bLDatas.converterDataParaDateUS(data_compra.getDate()));
//            modelContareceber.setReceVencimento(bLDatas.converterDataParaDateUS(data_vencimento.getDate()));
//            modelContareceber.setRecJuros((Double) juros.getValue());
//            modelContareceber.setReceRecebeu((Double) entrada.getValue());
//            juro = (double) juros.getValue();
//            total = modelContarReceber.getReceValorTotal();
//
//            valorFinal = (total * (100 + juro)) / 100;
//            modelContareceber.setReceValorTotal(valorFinal);
//
//            modelContareceber.setReceRestante(valorFinal - (double) entrada.getValue());
//
//            modelContareceber.setAtivo("PENDENTE");
//
//            totalcomjuros.setText(String.valueOf(valorFinal));
    }

    void fazerOrcamento() throws Exception {
        controllerContarReceber = new ControllerContarReceber();
        modelContareceber = new ModelContarReceber();
        double valorFinal;
        double juro;
        double total;

        modelContareceber.setIdStatus(5);
        modelContareceber.setIdVendas((int) vendadados.getSelectedItem());
        modelContareceber.setIdCliente((int) pagar_cliente.getSelectedItem());
        juro = formatador.converterVirgulaParaPonto(juros.getValue().toString());

        // setando o model
        modelContareceber.setReceDataCompra(bLDatas.converterDataParaDateUS(data_compra.getDate()));
        modelContareceber.setReceVencimento(bLDatas.converterDataParaDateUS(data_vencimento.getDate()));
        modelContareceber.setReceRecebeu(formatador.converterVirgulaParaPonto(entrada.getValue().toString()));

        modelContareceber.setRecJuros(formatador.converterVirgulaParaPonto(juros.getValue().toString()));
        
        total = formatador.converterVirgulaParaPonto(valor_total.getText().toString());

        valorFinal = (total * (100 + juro)) / 100;

        modelContareceber.setReceValorTotal(valorFinal);

        modelContareceber.setReceRestante(valorFinal - (double) entrada.getValue());

        modelContareceber.setAtivo("PENDENTE");
  
        BigDecimal aproximacaGordura = new BigDecimal(valorFinal).setScale(2, RoundingMode.HALF_EVEN);
        
        totalcomjuros.setText(String.valueOf(valorFinal));
        modelContareceber.setValorFinal(0.0);

        int idContaReceber = controllerContarReceber.salvarReceberController(modelContareceber);

        if (idContaReceber > 0) {

            JOptionPane.showMessageDialog(this, "Salvo com sucesso!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
            VerificarAtivo();
            carregarNaTabelaNomePesquisar();
            jTabbedPane1.setSelectedIndex(1);

            modelvendas = new Modelvendas();
            modelvendas = controlerVendas.getvendasController(idvendaConta);
            modelvendas.setIdContaReceber(idContaReceber);
            controlerVendas.atualizarvendasController(modelvendas);

        } else {
            JOptionPane.showMessageDialog(this, "Erro ao Salvar", "Atenção", JOptionPane.WARNING_MESSAGE);

        }

    }

    public class mudarCor extends DefaultTableCellRenderer {

        /**
         *
         */
        private final long serialVersionUID = 1L;
        public final float R = 0.9f;
        public final float G = 0.5f;
        public static final float B = 0.8f;

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            //203,216,227
            //Color c = new Color(203,216,227);
            Color c = Color.WHITE;
            Object text = table.getValueAt(row, 6);

            if (text != null && "PAGO".equals(text.toString())) {
                c = Color.BLUE;
                setForeground(c);

            }

            if (text != null && "PENDENTE".equals(text.toString())) {
                c = Color.ORANGE;
                setForeground(c);

            }
            if (text != null && "ATRASADO".equals(text.toString())) {
                c = Color.RED;
                setForeground(c);

            }

            return this;

        }

    }

    public ModelContarReceber resultado() throws Exception {
        int linha = this.tabela.getSelectedRow();
        int codigo = (int) tabela.getValueAt(linha, 0);

        modelContareceber = new ModelContarReceber();
        modelContareceber = controllerContarReceber.getReceberController(codigo);

        try {
            double recebido = formatador.converterVirgulaParaPonto(recebido_recebido.getValue().toString());

            double desconto = formatador.converterVirgulaParaPonto(recebido_desconto.getValue().toString());
            double restante;

            restante =  modelContareceber.getReceRestante() - recebido - desconto;
            receber_pagamento.setEnabled(true);

            modelContareceber.setReceRestante(restante);
            modelContareceber.setReceRecebeu(modelContareceber.getReceRecebeu() + recebido);
            modelContareceber.setReceVencimento(bLDatas.converterDataParaDateUS(vencimento.getDate()));
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Preencha todos os dados!", "Aviso", JOptionPane.INFORMATION_MESSAGE);

        }
        return modelContareceber;

    }

    // Verificar se está atradsado, pago  pendente....
    public void VerificarAtivo() throws Exception {

        //para comparar as datas
        listaContaCliente = new ArrayList<>();
        int diferecaData;

        listaContaCliente = controllerContaReceberCliente.getListaProdutosVendasProdutoDAO();
        for (int i = 0; i < listaContaCliente.size(); i++) {

            Date date1 = listaContaCliente.get(i).getModelreceber().getReceVencimento();
            Date date2 = bLDatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis()));
            diferecaData = date1.compareTo(date2);

            // Caso no haja restos a serem pagos.
            if (listaContaCliente.get(i).getModelreceber().getReceRestante().equals(0.0)) {

                modelContareceber = controllerContarReceber.getReceberController(listaContaCliente.get(i).getModelreceber().getIdReceber());
                modelContareceber.setAtivo("PAGO");
                controllerContarReceber.atualizarReceberController(modelContareceber);
            } // caso ainda tenha resto a serem pagos.
            else if (listaContaCliente.get(i).getModelreceber().getReceRestante() > 0.0 && diferecaData >= 0) {
                modelContareceber = controllerContarReceber.getReceberController(listaContaCliente.get(i).getModelreceber().getIdReceber());
                modelContareceber.setAtivo("PENDENTE");
                controllerContarReceber.atualizarReceberController(modelContareceber);
            } // caso ainda tenha resto e esteja atrasado
            else if (listaContaCliente.get(i).getModelreceber().getReceRestante() > 0.0 && diferecaData == -1) {
                modelContareceber = controllerContarReceber.getReceberController(listaContaCliente.get(i).getModelreceber().getIdReceber());
                modelContareceber.setAtivo("ATRASADO");
                controllerContarReceber.atualizarReceberController(modelContareceber);

            }
        }
    }

}
